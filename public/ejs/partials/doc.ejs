
<div class="documentation">
    <h2>Documentation</h2>
    <p>Requirements and how we solved them.</p>

    <ol class="doc-links">
        <li><a href="#node">Use Node and Express as server.</a></li>
        <li><a href="#flexbox">Create the general layout using Flexbox.</a></li>
        <li><a href="#nav">The Navigation.</a></li>
        <li><a href="#ajax">AJAX functionality.</a></li>
        <li><a href="#jquery">Use the basics of the jQuery library.</a></li>
        <li><a href="#participation">Participation and Contribution.</a></li>
        <li><a href="#knowledge">Knowledge Sharing.</a></li>
    </ol>

    <section id="node">
        <header>
            <h3>Use Node and Express as server.</h3>
        </header>
        <h4>App.js</h4>
        <pre class="code">
//All requirements for the node.js app
var express = require('express');
var routes = require('./routes');
var favicon = require('serve-favicon');
var app = express();
//Defines view engine jo ejs
app.set("view engine", "ejs");
// sets view path to current directory +/public
app.set('views', __dirname + '/public');
//Sets the path to all static GET methods to publiv
app.use(express.static('public'));
// sets the favicon
app.use(favicon(__dirname + '/public/img/favicon.ico'));


//<------------------------------------------->
// All the routes we are using
// Includes a default Bad Route if no route matches.
app.get("/", routes.home);

app.get("/internet", routes.internet);

app.get("/dinner", routes.dinner);

app.get("/beer", routes.beer);

app.get("/sushi", routes.sushi);

app.get("/art", routes.art);

app.get("/doc", routes.doc);

app.get("/random_beer", routes.random_beer);

app.get("/random_armor", routes.random_armor);

app.get("/film", routes.film);

app.get("/data",routes.data);

app.get("/graf",routes.graf);

app.get("*", routes.bad);
//<---------------------------------------------------------------->

// defines the port
var port = 7432;
// starting the actual express server
var server = app.listen(port, function(){
	console.log("Starting Server");
	console.log("Listening on port " + port);
});
        </pre>
        <br>
        <h4>index.js</h4>
        <pre class="code">
// All the routing for the applikation.
// these are called in app.js and defines the response to send.
exports.home = function(req,res){
	res.render("index", {route: "home"});
};

exports.internet = function(req,res){
	res.render("index", {route: "internet"});
};

exports.dinner = function(req,res){
	res.render("index", {route: "dinner"});
};

exports.beer = function(req,res){
	res.render("index", {route: "beer"});
};

exports.sushi = function(req,res){
	res.render("index", {route: "sushi"});
};

exports.film = function(req,res){
	res.render("index", {route: "film"})
};

exports.doc = function(req,res){
	res.render("index", {route: "doc"});
};

exports.art = function(req,res){
    res.render("index", {route: "art"});
};

exports.random_beer = function(req,res){
	var random = Math.floor((Math.random() * 8) + 1);
	var src = "img/beers/beer" + random.toString() + ".png";
	res.send(src);
};

exports.random_armor = function(req,res){
	var random = Math.floor((Math.random() * 42) + 1);
	var src = "img/film/armors/mark" + random.toString() + ".png";
	res.send(src);
};

exports.data=function(req,res){
res.sendFile("txt/kaText1.txt",{root: "public"});
};
exports.graf=function(req,res){
res.send("../img/internet/xkcdgrapf.png");
};

exports.bad = function(req,res){
	res.send("Bad Route");
};

        </pre>

    </section>

    <section id="flexbox">
        <header>
            <h3>Create the general layout using Flexbox.</h3>
        </header>
        <p>An extract from the CSS:</p>
    <pre class="code">


    /*--------------- CH1 GENERIC --------*/
    .wrapper {
        display: -webkit-box;
        display: -moz-box;
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
        -webkit-flex-flow: row wrap;
        flex-flow: row wrap;
        text-align: center;
    }

    .wrapper > * {
        flex: 1 100%;
    }


    /*--------------- CH3 NAVIGATION --------*/
    .navbar {
        display:flex;
        justify-content: center;
    }
    .nav-container {
        display: flex;
        justify-content: center;
    }

    .flex-item {
        width: 14%;
        list-style: none;
    }
    </pre>
        <p>
            “Display: flex” simply defines a flex container and enables all its direct children to flex context.
            Therefore we have a wrapper around all the content of the page. The direct child of the wrapper is the header
            (which contains the navigation), a main element with interchangeable content of all subpages, and a footer. The
            next rule:
        </p>
    <pre class="code">
        .wrapper > * {
        flex: 1 100%;
    }
    </pre>
        <p>
            States that the all the direct children (the header, main, and footer) should span the whole width of the page.
        </p>
    </section>

    <section id="nav">
        <header>
            <h3>The Navigation</h3>
        </header>
        <p>
            The navigation is wrapped its own flex container and states that each item in the container should be center
            aligned with each other (justify-content: center;).
            The navbar class centers the ul containing all the links.
        </p>
    </section>

    <section id="ajax">
        <header>
            <h3>AJAX functionality.</h3>
        </header>
        <p>
            We used AJAX in a number of functions across the site.
            We used it to fetch text from files on the server and apply these to the DOM using JQuery. ref: Internet
            It was also used to retrieve image links on certain parts of the site. ref:Beer,internet.
        </p>
    </section>

    <section id="jquery">
        <header>
            <h3>Use the basics of the jQuery library.</h3>
        </header>
    <pre class="code code-wide">
        For the most part we used the id selector($(“#yourID”)) to reference sections we wanted altered using JQuery ref:Beer,internet,dinnerselector, film

        We also used a number of JQuery functions such as:
        onmouseover(),onmouseleave(),click() ,$(document).ready(),.animate()
        We also used functions as parameters in these JQuery functions such as defining new functions in the .ready(function{}).
        ref:Beer,internet,dinnerselector
        We also defined several event handlers that made use of mouseover(),click() etc.
        ref:Beer,internet,dinnerselector, film
    </pre>
    </section>

    <section id="participation">
        <header>
            <h3>Participation and Contribution</h3>
        </header>
        <p>
            All the members have committed code during the span of the exercise. We met every Wednesday and divided the
            different requirements topics to groups containing of two people:
        </p>
        <ul>
            <li><p>Group Node & Express; Markus and Stian - Worked with Node.js and Express.js. Markus had the most
                    knowledge about Node and Express so Stian joined him in order to learn more about it.</p></li>
            <li><p>Group Flexbox; Marius and Thomas - Marius and Thomas both had knowledge about CSS, but had never worked
                    with Flexbox before. In order to fulfill the requirement they had to do substantial research and learned
                    a lot about Flexbox within the span of the project.</p></li>
            <li><p>Group jQuery; Ken Are and Daniel - Worked with jQuery and AJAX. They both had little to no knowledge
                    about jQuery, Ken Are had worked with it a little about two years ago. They both wanted more insight in
                    jQuery and shared discoveries with the group as the time went on.</p></li>
        </ul>
    </section>

    <section id="knowledge">
        <header>
            <h3>Knowledge Sharing</h3>
        </header>
        <p>
            On Wednesday 21st each sub-group will share with the rest of the group members what they have learned about said
            technology in order to make sure everyone is up-to-date on the course technologies.
        </p>
    </section>
</div>